function ER_pipeline_Chao(sbj_name, project_name, block_names, dirs , datatype, freq_band) %unfinished 21_3_23 Chao
%% INPUTS
%   sbj_name:               subject name
%   project_name:           name of task
%   block_names:                     names of blocks to be analyed (cell of strings)
%   dirs:                   directories pointing to files of interest (generated by InitializeDirs)
for bi = 1:length(block_names) %先算一个
    
    %%
    % Load globalVar
    bn = block_names{bi};
    
    %% Load globalVar
    fn = sprintf('%s/originalData/%s/global_%s_%s_%s.mat',dirs.data_root,sbj_name,project_name,sbj_name,bn);
    load(fn,'globalVar');
    
    if ~ischar(freq_band)
        freqs = freq_band;
        % if freq_band input contains numbers, create label for band
        freq_band = [num2str(freqs(1)),'_to_',num2str(freqs(end))];
        freq_band = strrep(freq_band,'.','_');
    else
        freqs = genFreqs(freq_band);%this parameter was not used in the folloing code (Baotian had specify the 4 bands in the paper)
    end
    
    if strcmp(datatype,'Band')
        data_root=globalVar.BandData;
    else
        data_root=globalVar.SpecData;
    end
    
    %need to figure out a output direction??? el wise? our upper logcial wise?
    % dir_out = [data_root,freq_band,'Data',filesep,sbj_name,filesep,bn];c
    dir_out = [data_root,freq_band,filesep,sbj_name,filesep,bn];
    if ~exist(dir_out, 'dir')
        mkdir(dir_out)
    end
    
    
    %% load subjVar_volume_BR select electrodes in the gray matter.
    load([dirs.original_data filesep sbj_name filesep 'subjVar_volume_BR_' sbj_name '.mat'])
    anat_idx = ~strcmp(subjVar_volume_BR.eleinfo.AAL3,'NotAvailable');
    YEO7_idx = ~strcmp(subjVar_volume_BR.eleinfo.YEO7,'NotAvailable');
    gray_idx = anat_idx;%anat_idx&YEO7_idx
    
    
    
    for el = 1:length(globalVar.channame_BR)
        
        if gray_idx(el)
            
            %% Per electrode
            %loda each BR data
            load(sprintf('%s/BRiEEG%s_%.2d.mat',globalVar.BRData,bn,el));
            data.label = globalVar.channame_BR{el};
            
            %% step 1 calculate the ER
            data_iEEG = data.wave;
            fs = data.fsample; % frequency sampling is defined here
            data_length = length(data.wave); % how many dots are in this data
            data_time_length = fix(data_length / fs); % data time in seconds(s)
            time_series = 0:1/fs:(data_length-1)/fs;
            % defination of deferent frequency band.
            % attention, this is slightly different from the article, part of the
            % reason is we need to consider the frequency resoluton after FFT, by using 1000 fs,
            % it is better to use integers only, however you can use zero padding to
            % increase the frequency resoluton, but I think that is not necessary.
            theta_band = [4:7]; %[4:7]
            alpha_band = [8:12]; %[8:12]
            beta_band = [13:24]; %[13:24]
            %             gamma_band = [25:49,51:99,101:149,151:199,201:250];%[24:97];
            gamma_band = [24:250];%[24:97];
            
            
            %             theta_band = [101:140];
            %             alpha_band = [141:150];
            %             beta_band = [151:190];
            %             gamma_band = [191:400];
            
            
            % define sliding window duration D
            D = 1; % time window to perform FFT in seconds (s), time window in article is probably 0.5 according to their map % this could be changed
            window_length = D * fs;%(points)
            % define step length for the sliding window
            step_length = 0.05; % step_length in seconds(s), 0.01 acturally means 10 dot with 1000 fs, step length affact time consuming seriously % this could be changed
            
            %% Step 1 fft transform & frequency sub-band energy extraction & ER calculation
            
            indx_matrix = buffer(1:data_length,round(window_length),round((1-step_length)*fs),'nodelay');
            for i = 1:size(indx_matrix,2)-1 % we don't need the last column
                data_in_window = data_iEEG(indx_matrix(:,i));
                % for i = 1:(step_length * fs):(data_length - D * fs) % slide the window
                %     data_in_window = data_iEEG(i:(window_length+i-1)); % extract time series data in one window %chao do we need minus 1????
                freq_resolution = fs / window_length; % define freq_resolution %chao ???
                X_data = periodogram(data_in_window); % I need to read more books
                X_data = log10(X_data);
                freq_range = 0:(length(X_data)-1)*freq_resolution; % define the frequency axis>??????
                % extract energy of different band  %chao need to make sure the
                % frequency sampling and energy
                E_theta = sum(X_data(theta_band + 1));% chao, there is engergy result of 0 Hz in periodogram, this is why +1
                E_alpha = sum(X_data(alpha_band + 1));
                E_beta = sum(X_data(beta_band + 1));
                E_gamma = sum(X_data(gamma_band + 1));
                % calculate time-varying ER
                %     ER_number = fix(i/(step_length*fs))+1;
                ER(i) = (E_beta + E_gamma)/(E_theta + E_alpha);
                %     ER_n(i) = mean(ER(1:i));
                
            end
            
            data.ER = ER;
            
            
            %%
            
            
            fn_out = sprintf('%s%s%s%s%s%s%s%siEEG%s_%.2d.mat',globalVar.([datatype,'Data']),freq_band,filesep,sbj_name,filesep,bn,filesep,freq_band,bn,el);
            % fn_out = [globalVar.([datatype,'Data']),filesep,freq_band,filesep,
            
            
            
            save(fn_out,'data')
            disp(['ER calculating: Block ', bn,', Elec ',data.label])
            
            % EI caluculations for SEEG data ref Bartolomei et al. Brain 2008
            % Sheng Jingwei 2015.11.14
            % input data
            % Updated by Baotian 20170609, Beijing
            
        else
        end
    end
    globalVar.time_series = time_series;
    globalVar.ER_series = time_series(indx_matrix(1,1:end-1));
    globalVar.ER_length = length(data.ER);
    save(fn,'globalVar');
    disp('globalVar updated');
end
end

